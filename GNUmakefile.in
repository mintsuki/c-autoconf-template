# Nuke built-in rules and variables
override MAKEFLAGS += -rR

# Misc autoconf variable imports.
override SRCDIR := @SRCDIR@
override BUILDDIR := @BUILDDIR@
override VERSION := @PACKAGE_VERSION@
override TARGET := @PACKAGE_TARNAME@

# These 2 are needed as-is for AC*DIR.
override prefix := @prefix@
override exec_prefix := @exec_prefix@

# AC*DIR variables.
override ACBINDIR := @bindir@

# Macros to make our build system still work from within paths with spaces
# or other special characters.
override SPACE := $(subst ,, )
MKESCAPE = $(subst $(SPACE),\ ,$(1))
SHESCAPE = $(subst ','\'',$(1))
OBJESCAPE = $(subst .a ,.a' ',$(subst .o ,.o' ',$(call SHESCAPE,$(1))))

# File lists.
override CFILES := $(shell cd '$(call SHESCAPE,$(SRCDIR))' && find . -type f -name '*.c')
override OBJ := $(addprefix $(call MKESCAPE,$(BUILDDIR))/,$(CFILES:.c=.o))
override HEADER_DEPS := $(CFILES:.c=.d)

# DEFAULT_VAR definition.
define DEFAULT_VAR =
    ifeq ($(origin $1),default)
        override $(1) := $(2)
    endif
    ifeq ($(origin $1),undefined)
        override $(1) := $(2)
    endif
endef

# Generator executables.
$(eval $(call DEFAULT_VAR,CC,@CC@))
override NATIVE_STRIP := @NATIVE_STRIP@
override MKDIR_P := @MKDIR_P@
override INSTALL := @INSTALL@
override INSTALL_PROGRAM := @INSTALL_PROGRAM@

# User command flags.
CFLAGS ?= @CFLAGS@
CPPFLAGS ?= @CPPFLAGS@
LDFLAGS ?= @LDFLAGS@
LIBS ?= @LIBS@

# Needed command flags.
override CFLAGS += \
    -std=gnu11 \
    -MMD
override CPPFLAGS := \
    -I'$(call SHESCAPE,$(SRCDIR))' \
    $(CPPFLAGS)

# Default target.
.PHONY: all
all: $(TARGET)

# Link rules for the final executable.
$(TARGET): $(OBJ)
	$(CC) $(CFLAGS) $(LDFLAGS) '$(call OBJESCAPE,$^)' $(LIBS) -o $@

# Include header dependencies.
-include $(HEADER_DEPS)

# Compilation rules for *.c files.
$(call MKESCAPE,$(BUILDDIR))/%.o: $(call MKESCAPE,$(SRCDIR))/%.c
	$(MKDIR_P) "$$(dirname '$(call SHESCAPE,$@)')"
	$(CC) $(CFLAGS) $(CPPFLAGS) -c '$(call SHESCAPE,$<)' -o '$(call SHESCAPE,$@)'

# Remove object files and the final executable.
.PHONY: clean
clean:
	rm -rf $(TARGET) $(OBJ) $(HEADER_DEPS)

# Remove files generated by configure.
.PHONY: distclean
distclean: clean
	rm -rf config.log config.status GNUmakefile

# Create a release tarball.
.PHONY: dist
dist:
	rm -rf "$(TARGET)-$(VERSION)"
	$(MKDIR_P) "$(TARGET)-$(VERSION)"
	cp -rp '$(call SHESCAPE,$(SRCDIR))'/.git "$(TARGET)-$(VERSION)"/
	cd "$(TARGET)-$(VERSION)" && git checkout .
	cd "$(TARGET)-$(VERSION)" && ./bootstrap
	rm -rf "$(TARGET)-$(VERSION)"/.git
	rm -rf "$(TARGET)-$(VERSION)"/.gitignore
	rm -rf "$(TARGET)-$(VERSION)"/.github
	rm -rf "$(TARGET)-$(VERSION)"/autom4te.cache
	echo "$(VERSION)" >"$(TARGET)-$(VERSION)"/version
	tar -Jcf "$(TARGET)-$(VERSION)".tar.xz "$(TARGET)-$(VERSION)"
	tar -zcf "$(TARGET)-$(VERSION)".tar.gz "$(TARGET)-$(VERSION)"
	rm -rf "$(TARGET)-$(VERSION)"

# Remove ALL generated files.
.PHONY: maintainer-clean
maintainer-clean: distclean
	cd '$(call SHESCAPE,$(SRCDIR))' && rm -rf configure build-aux *'~' autom4te.cache

# Install files and executables to the final locations.
.PHONY: install
install: all
	$(INSTALL) -d '$(call SHESCAPE,$(DESTDIR)$(ACBINDIR))'
	$(INSTALL_PROGRAM) $(TARGET) '$(call SHESCAPE,$(DESTDIR)$(ACBINDIR))/'

# Install and strip executables.
.PHONY: install-strip
install-strip: install
	$(NATIVE_STRIP) '$(call SHESCAPE,$(DESTDIR)$(ACBINDIR))/$(TARGET)'

# Uninstall previously installed files and executables.
.PHONY: uninstall
uninstall:
	rm -f '$(call SHESCAPE,$(DESTDIR)$(ACBINDIR))/$(TARGET)'
